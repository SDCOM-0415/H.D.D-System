name: Build Application

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Create Tag
        id: create_tag
        run: |
          DATE=$(date +'%Y%m%d')
          COUNT=$(git tag -l "v${DATE}.*" | wc -l)
          NEW_COUNT=$((COUNT + 1))
          TAG_NAME="v${DATE}.${NEW_COUNT}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${TAG_NAME}
          git push origin ${TAG_NAME}

  build-windows:
    runs-on: windows-latest
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write # 添加创建release的权限
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: requirements.windows.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.windows.txt

      - name: Build with PyInstaller
        run: |
          # 创建一个临时的spec文件
          echo "# -*- mode: python ; coding: utf-8 -*-" > hdd_system.spec
          echo "block_cipher = None" >> hdd_system.spec
          echo "a = Analysis(['Main.PY']," >> hdd_system.spec
          echo "             pathex=['${{ github.workspace }}']," >> hdd_system.spec
          echo "             binaries=[]," >> hdd_system.spec
          echo "             datas=[('*.png', '.'), ('*.mp3', '.'), ('*.wav', '.'), ('*.ttf', '.'), ('Icon.ico', '.')]," >> hdd_system.spec
          echo "             hiddenimports=[]," >> hdd_system.spec
          echo "             hookspath=[]," >> hdd_system.spec
          echo "             runtime_hooks=[]," >> hdd_system.spec
          echo "             excludes=[]," >> hdd_system.spec
          echo "             win_no_prefer_redirects=False," >> hdd_system.spec
          echo "             win_private_assemblies=False," >> hdd_system.spec
          echo "             cipher=block_cipher," >> hdd_system.spec
          echo "             noarchive=False)" >> hdd_system.spec
          echo "pyz = PYZ(a.pure, a.zipped_data," >> hdd_system.spec
          echo "             cipher=block_cipher)" >> hdd_system.spec
          echo "exe = EXE(pyz," >> hdd_system.spec
          echo "          a.scripts," >> hdd_system.spec
          echo "          []," >> hdd_system.spec
          echo "          exclude_binaries=True," >> hdd_system.spec
          echo "          name='HDD-System'," >> hdd_system.spec
          echo "          debug=False," >> hdd_system.spec
          echo "          bootloader_ignore_signals=False," >> hdd_system.spec
          echo "          strip=False," >> hdd_system.spec
          echo "          upx=True," >> hdd_system.spec
          echo "          console=False," >> hdd_system.spec
          echo "          disable_windowed_traceback=False," >> hdd_system.spec
          echo "          target_arch=None," >> hdd_system.spec
          echo "          codesign_identity=None," >> hdd_system.spec
          echo "          entitlements_file=None," >> hdd_system.spec
          echo "          icon='Icon.ico')" >> hdd_system.spec
          echo "coll = COLLECT(exe," >> hdd_system.spec
          echo "               a.binaries," >> hdd_system.spec
          echo "               a.zipfiles," >> hdd_system.spec
          echo "               a.datas," >> hdd_system.spec
          echo "               strip=False," >> hdd_system.spec
          echo "               upx=True," >> hdd_system.spec
          echo "               upx_exclude=[]," >> hdd_system.spec
          echo "               name='HDD-System')" >> hdd_system.spec
          
          # 使用spec文件构建
          pyinstaller hdd_system.spec
        env:
          PYTHONPATH: ${{ github.workspace }}

      # 创建zip文件以便上传
      - name: Create ZIP archive
        run: |
          cd dist
          7z a -tzip HDD-System-Windows.zip HDD-System/

      # 上传到Release
      - name: Upload Windows Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/HDD-System-Windows.zip
          name: Release ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.create-tag.outputs.tag_name }}
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.create-tag.outputs.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    runs-on: macos-latest
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || startsWith(github.ref, 'refs/tags/'))
    strategy:
      matrix:
        arch: [x64, arm64]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.arch }}
          cache: 'pip'
          cache-dependency-path: requirements.macos.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow packaging
          pip install -r requirements.macos.txt
          
          mkdir -p icon.iconset
          python -c "from PIL import Image; img = Image.open('Icon.ico'); img.save('icon.iconset/icon_512x512.png', 'PNG')"
          iconutil -c icns icon.iconset -o Icon.icns

      - name: Build for ${{ matrix.arch }}
        run: |
          # 创建架构特定的spec文件
          echo "# -*- mode: python ; coding: utf-8 -*-" > hdd_system_${{ matrix.arch }}.spec
          echo "block_cipher = None" >> hdd_system_${{ matrix.arch }}.spec
          echo "a = Analysis(['Main.PY']," >> hdd_system_${{ matrix.arch }}.spec
          echo "             pathex=['${{ github.workspace }}']," >> hdd_system_${{ matrix.arch }}.spec
          echo "             binaries=[]," >> hdd_system_${{ matrix.arch }}.spec
          echo "             datas=[('*.png', '.'), ('*.mp3', '.'), ('*.wav', '.'), ('*.ttf', '.'), ('Icon.icns', '.')]," >> hdd_system_${{ matrix.arch }}.spec
          echo "             hiddenimports=[]," >> hdd_system_${{ matrix.arch }}.spec
          echo "             hookspath=[]," >> hdd_system_${{ matrix.arch }}.spec
          echo "             runtime_hooks=[]," >> hdd_system_${{ matrix.arch }}.spec
          echo "             excludes=[]," >> hdd_system_${{ matrix.arch }}.spec
          echo "             win_no_prefer_redirects=False," >> hdd_system_${{ matrix.arch }}.spec
          echo "             win_private_assemblies=False," >> hdd_system_${{ matrix.arch }}.spec
          echo "             cipher=block_cipher," >> hdd_system_${{ matrix.arch }}.spec
          echo "             noarchive=False)" >> hdd_system_${{ matrix.arch }}.spec
          echo "pyz = PYZ(a.pure, a.zipped_data," >> hdd_system_${{ matrix.arch }}.spec
          echo "             cipher=block_cipher)" >> hdd_system_${{ matrix.arch }}.spec
          echo "exe = EXE(pyz," >> hdd_system_${{ matrix.arch }}.spec
          echo "          a.scripts," >> hdd_system_${{ matrix.arch }}.spec
          echo "          []," >> hdd_system_${{ matrix.arch }}.spec
          echo "          exclude_binaries=True," >> hdd_system_${{ matrix.arch }}.spec
          echo "          name='HDD-System'," >> hdd_system_${{ matrix.arch }}.spec
          echo "          debug=False," >> hdd_system_${{ matrix.arch }}.spec
          echo "          bootloader_ignore_signals=False," >> hdd_system_${{ matrix.arch }}.spec
          echo "          strip=False," >> hdd_system_${{ matrix.arch }}.spec
          echo "          upx=True," >> hdd_system_${{ matrix.arch }}.spec
          echo "          console=False," >> hdd_system_${{ matrix.arch }}.spec
          echo "          disable_windowed_traceback=False," >> hdd_system_${{ matrix.arch }}.spec
          echo "          target_arch='${{ matrix.arch }}'," >> hdd_system_${{ matrix.arch }}.spec
          echo "          codesign_identity=None," >> hdd_system_${{ matrix.arch }}.spec
          echo "          entitlements_file=None," >> hdd_system_${{ matrix.arch }}.spec
          echo "          icon='Icon.icns')" >> hdd_system_${{ matrix.arch }}.spec
          echo "coll = COLLECT(exe," >> hdd_system_${{ matrix.arch }}.spec
          echo "               a.binaries," >> hdd_system_${{ matrix.arch }}.spec
          echo "               a.zipfiles," >> hdd_system_${{ matrix.arch }}.spec
          echo "               a.datas," >> hdd_system_${{ matrix.arch }}.spec
          echo "               strip=False," >> hdd_system_${{ matrix.arch }}.spec
          echo "               upx=True," >> hdd_system_${{ matrix.arch }}.spec
          echo "               upx_exclude=[]," >> hdd_system_${{ matrix.arch }}.spec
          echo "               name='HDD-System')" >> hdd_system_${{ matrix.arch }}.spec
          echo "app = BUNDLE(coll," >> hdd_system_${{ matrix.arch }}.spec
          echo "             name='HDD-System.app'," >> hdd_system_${{ matrix.arch }}.spec
          echo "             icon='Icon.icns'," >> hdd_system_${{ matrix.arch }}.spec
          echo "             bundle_identifier=None," >> hdd_system_${{ matrix.arch }}.spec
          echo "             info_plist={" >> hdd_system_${{ matrix.arch }}.spec
          echo "                'CFBundlePackageType': 'APPL'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'CFBundleExecutable': 'HDD-System'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'CFBundleIdentifier': 'com.example.HDD-System'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'CFBundleVersion': '1.0'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'CFBundleShortVersionString': '1.0'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'LSMinimumSystemVersion': '10.15'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'NSHighResolutionCapable': 'True'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'NSRequiresAquaSystemAppearance': 'False'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'NSPrincipalClass': 'NSApplication'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'CFBundleDisplayName': 'HDD-System'," >> hdd_system_${{ matrix.arch }}.spec
          echo "                'CFBundleName': 'HDD-System'" >> hdd_system_${{ matrix.arch }}.spec
          echo "             })" >> hdd_system_${{ matrix.arch }}.spec
          
          # 构建应用
          pyinstaller hdd_system_${{ matrix.arch }}.spec
          
          # 重命名输出目录以包含架构信息
          mv dist/HDD-System.app dist/HDD-System_${{ matrix.arch }}.app
        env:
          PYTHONPATH: ${{ github.workspace }}
          MACOSX_DEPLOYMENT_TARGET: "11.0"

      - name: Create DMG for ${{ matrix.arch }}
        run: |
          brew install create-dmg
          
          mkdir -p dmg_contents_${{ matrix.arch }}
          cp -r dist/HDD-System_${{ matrix.arch }}.app dmg_contents_${{ matrix.arch }}/
          
          create-dmg \
            --volname "HDD-System (${{ matrix.arch }})" \
            --volicon "Icon.icns" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon "HDD-System_${{ matrix.arch }}.app" 150 190 \
            --app-drop-link 450 190 \
            "HDD-System-macOS-${{ matrix.arch }}.dmg" \
            "dmg_contents_${{ matrix.arch }}/"

      - name: Upload ${{ matrix.arch }} DMG to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./HDD-System-macOS-${{ matrix.arch }}.dmg
          name: Release ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.create-tag.outputs.tag_name }}
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.create-tag.outputs.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}