name: Build Application

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*' # 当推送以v开头的tag时触发
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Create Tag
        id: create_tag
        run: |
          # 获取当前日期作为版本号的一部分
          DATE=$(date +'%Y%m%d')
          # 获取今天已经创建的tag数量
          COUNT=$(git tag -l "v${DATE}.*" | wc -l)
          # 新的tag编号
          NEW_COUNT=$((COUNT + 1))
          # 构造新的tag名称
          TAG_NAME="v${DATE}.${NEW_COUNT}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          
          # 创建并推送tag
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${TAG_NAME}
          git push origin ${TAG_NAME}
  build-windows:
    runs-on: windows-latest
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write # 添加创建release的权限
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: requirements.windows.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.windows.txt

      - name: Build with PyInstaller
        run: |
          # 创建一个临时的spec文件
          echo "# -*- mode: python ; coding: utf-8 -*-" > hdd_system.spec
          echo "block_cipher = None" >> hdd_system.spec
          echo "a = Analysis(['Main.PY']," >> hdd_system.spec
          echo "             pathex=['${{ github.workspace }}']," >> hdd_system.spec
          echo "             binaries=[]," >> hdd_system.spec
          echo "             datas=[('*.png', '.'), ('*.mp3', '.'), ('*.wav', '.'), ('*.ttf', '.'), ('Icon.ico', '.')]," >> hdd_system.spec
          echo "             hiddenimports=[]," >> hdd_system.spec
          echo "             hookspath=[]," >> hdd_system.spec
          echo "             runtime_hooks=[]," >> hdd_system.spec
          echo "             excludes=[]," >> hdd_system.spec
          echo "             win_no_prefer_redirects=False," >> hdd_system.spec
          echo "             win_private_assemblies=False," >> hdd_system.spec
          echo "             cipher=block_cipher," >> hdd_system.spec
          echo "             noarchive=False)" >> hdd_system.spec
          echo "pyz = PYZ(a.pure, a.zipped_data," >> hdd_system.spec
          echo "             cipher=block_cipher)" >> hdd_system.spec
          echo "exe = EXE(pyz," >> hdd_system.spec
          echo "          a.scripts," >> hdd_system.spec
          echo "          []," >> hdd_system.spec
          echo "          exclude_binaries=True," >> hdd_system.spec
          echo "          name='HDD-System'," >> hdd_system.spec
          echo "          debug=False," >> hdd_system.spec
          echo "          bootloader_ignore_signals=False," >> hdd_system.spec
          echo "          strip=False," >> hdd_system.spec
          echo "          upx=True," >> hdd_system.spec
          echo "          console=False," >> hdd_system.spec
          echo "          disable_windowed_traceback=False," >> hdd_system.spec
          echo "          target_arch=None," >> hdd_system.spec
          echo "          codesign_identity=None," >> hdd_system.spec
          echo "          entitlements_file=None," >> hdd_system.spec
          echo "          icon='Icon.ico')" >> hdd_system.spec
          echo "coll = COLLECT(exe," >> hdd_system.spec
          echo "               a.binaries," >> hdd_system.spec
          echo "               a.zipfiles," >> hdd_system.spec
          echo "               a.datas," >> hdd_system.spec
          echo "               strip=False," >> hdd_system.spec
          echo "               upx=True," >> hdd_system.spec
          echo "               upx_exclude=[]," >> hdd_system.spec
          echo "               name='HDD-System')" >> hdd_system.spec
          
          # 使用spec文件构建
          pyinstaller hdd_system.spec
        env:
          PYTHONPATH: ${{ github.workspace }}

      # 为不同架构构建
      - name: Build for different architectures
        run: |
          # x86 (32-bit)
          echo "Building for x86..."
          $env:PYTHONPATH = "${{ github.workspace }}"
          (Get-Content hdd_system.spec) -replace 'target_arch=None', 'target_arch="x86"' | Set-Content hdd_system_x86.spec
          pyinstaller hdd_system_x86.spec
          cd dist
          7z a -tzip "../HDD-System-Windows-x86.zip" HDD-System/
          cd ..
          Remove-Item -Recurse -Force dist, build
          
          # x64 (64-bit)
          echo "Building for x64..."
          (Get-Content hdd_system.spec) -replace 'target_arch=None', 'target_arch="x64"' | Set-Content hdd_system_x64.spec
          pyinstaller hdd_system_x64.spec
          cd dist
          7z a -tzip "../HDD-System-Windows-x64.zip" HDD-System/
          cd ..

      # 上传到Release
      - name: Upload Windows Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./HDD-System-Windows-x86.zip
            ./HDD-System-Windows-x64.zip
          name: Release ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.create-tag.outputs.tag_name }}
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.create-tag.outputs.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    runs-on: macos-14-xl
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write # 添加创建release的权限
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install x86_64 gettext
        run: |
          # 切换到x86_64架构的Homebrew
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # 安装x86_64架构的gettext
          arch -x86_64 brew install gettext
          echo "GETTEXT_PATH=$(arch -x86_64 brew --prefix gettext)" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: requirements.macos.txt
        env:
          DYLD_LIBRARY_PATH: ${{ env.GETTEXT_PATH }}/lib

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # 显示Python和pip的架构信息
          python -c "import platform; print('Python架构:', platform.machine())"
          
          # 设置x86_64架构
          export ARCHFLAGS="-arch x86_64"
          export SYSTEM_VERSION_COMPAT=1
          
          # 强制使用x86_64架构
          echo "强制使用x86_64架构..."
          arch -x86_64 python -c "import platform; print('强制后Python架构:', platform.machine())"
      
          # 安装依赖项并指定目标架构
              echo "安装x86_64架构依赖..."
              arch -x86_64 pip install pyinstaller pillow
              arch -x86_64 pip install -r requirements.macos.txt

              # 安装其他必要的包
              arch -x86_64 pip install packaging
          
          # 验证关键依赖项的架构
          echo "检查pygame安装..."
          python -c "import pygame; print('Pygame版本:', pygame.version.ver)"
          file $(python -c "import pygame; print(pygame.__file__)")
          
          # 使用Pillow将.ico转换为.icns
          mkdir -p icon.iconset
          python -c "from PIL import Image; img = Image.open('Icon.ico'); img.save('icon.iconset/icon_512x512.png', 'PNG')"
          iconutil -c icns icon.iconset -o Icon.icns

      - name: Build with PyInstaller
        run: |
          # 创建一个临时的spec文件
          echo "# -*- mode: python ; coding: utf-8 -*-" > hdd_system_mac.spec
          echo "block_cipher = None" >> hdd_system_mac.spec
          echo "a = Analysis(['Main.PY']," >> hdd_system_mac.spec
          echo "             pathex=['${{ github.workspace }}']," >> hdd_system_mac.spec
          echo "             binaries=[]," >> hdd_system_mac.spec
          echo "             datas=[('*.png', '.'), ('*.mp3', '.'), ('*.wav', '.'), ('*.ttf', '.'), ('Icon.icns', '.')]," >> hdd_system_mac.spec
          echo "             hiddenimports=[]," >> hdd_system_mac.spec
          echo "             hookspath=[]," >> hdd_system_mac.spec
          echo "             runtime_hooks=[]," >> hdd_system_mac.spec
          echo "             excludes=[]," >> hdd_system_mac.spec
          echo "             win_no_prefer_redirects=False," >> hdd_system_mac.spec
          echo "             win_private_assemblies=False," >> hdd_system_mac.spec
          echo "             cipher=block_cipher," >> hdd_system_mac.spec
          echo "             noarchive=False)" >> hdd_system_mac.spec
          echo "pyz = PYZ(a.pure, a.zipped_data," >> hdd_system_mac.spec
          echo "             cipher=block_cipher)" >> hdd_system_mac.spec
          echo "exe = EXE(pyz," >> hdd_system_mac.spec
          echo "          a.scripts," >> hdd_system_mac.spec
          echo "          []," >> hdd_system_mac.spec
          echo "          exclude_binaries=True," >> hdd_system_mac.spec
          echo "          name='HDD-System'," >> hdd_system_mac.spec
          echo "          debug=False," >> hdd_system_mac.spec
          echo "          bootloader_ignore_signals=False," >> hdd_system_mac.spec
          echo "          strip=False," >> hdd_system_mac.spec
          echo "          upx=True," >> hdd_system_mac.spec
          echo "          console=False," >> hdd_system_mac.spec
          echo "          disable_windowed_traceback=False," >> hdd_system_mac.spec
          echo "          target_arch='x86_64'," >> hdd_system_mac.spec
          echo "          codesign_identity=None," >> hdd_system_mac.spec
          echo "          entitlements_file=None," >> hdd_system_mac.spec
          echo "          icon='Icon.icns')" >> hdd_system_mac.spec
          echo "coll = COLLECT(exe," >> hdd_system_mac.spec
          echo "               a.binaries," >> hdd_system_mac.spec
          echo "               a.zipfiles," >> hdd_system_mac.spec
          echo "               a.datas," >> hdd_system_mac.spec
          echo "               strip=False," >> hdd_system_mac.spec
          echo "               upx=True," >> hdd_system_mac.spec
          echo "               upx_exclude=[]," >> hdd_system_mac.spec
          echo "               name='HDD-System')" >> hdd_system_mac.spec
          echo "app = BUNDLE(coll," >> hdd_system_mac.spec
          echo "             name='HDD-System.app'," >> hdd_system_mac.spec
          echo "             icon='Icon.icns'," >> hdd_system_mac.spec
          echo "             bundle_identifier=None," >> hdd_system_mac.spec
          echo "             info_plist={" >> hdd_system_mac.spec
          echo "                'NSHighResolutionCapable': 'True'," >> hdd_system_mac.spec
          echo "                'NSRequiresAquaSystemAppearance': 'False'," >> hdd_system_mac.spec
          echo "                'NSPrincipalClass': 'NSApplication'," >> hdd_system_mac.spec
          echo "                'CFBundleDisplayName': 'HDD-System'," >> hdd_system_mac.spec
          echo "                'CFBundleName': 'HDD-System'," >> hdd_system_mac.spec
          echo "                'LSMinimumSystemVersion': '11.0'," >> hdd_system_mac.spec
          echo "             })" >> hdd_system_mac.spec
          
          # 使用spec文件构建
          echo "验证spec文件中的target_arch设置..."
          grep "target_arch" hdd_system_mac.spec
          echo "开始构建..."
          pyinstaller hdd_system_mac.spec
        env:
          PYTHONPATH: ${{ github.workspace }}
          MACOSX_DEPLOYMENT_TARGET: "11.0"

      - name: Verify Binary Architecture
        run: |
          echo "检查应用程序架构支持..."
          lipo -archs "dist/HDD-System.app/Contents/MacOS/HDD-System" || true
          
          echo "检查最低系统要求..."
          plutil -p "dist/HDD-System.app/Contents/Info.plist" | grep LSMinimumSystemVersion || true
          
          echo "显示详细文件信息..."
          file "dist/HDD-System.app/Contents/MacOS/HDD-System"
          
          echo "确认是否为arm64架构..."
          otool -l "dist/HDD-System.app/Contents/MacOS/HDD-System" | grep -A 4 LC_BUILD_VERSION || true

      # 创建DMG安装包
      - name: Create DMG Package
        run: |
          # 安装create-dmg工具（如果尚未安装）
          brew install create-dmg || true
          
          # 验证构建架构
          echo "验证x86_64构建架构..."
          file dist/HDD-System.app/Contents/MacOS/HDD-System
          
          # 创建x86_64版本的DMG
          echo "创建x86_64版本的DMG..."
          mkdir -p dmg_contents
          cp -r dist/HDD-System.app dmg_contents/ || { echo "复制x86_64 .app失败"; exit 1; }
          create-dmg \
            --volname "HDD-System" \
            --volicon "Icon.icns" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon "HDD-System.app" 150 190 \
            --app-drop-link 450 190 \
            "HDD-System-macOS-x86_64.dmg" \
            "dmg_contents/" || { echo "创建x86_64 DMG失败"; exit 1; }
          
          # 检查DMG文件是否创建成功
          echo "检查DMG文件..."
          ls -la *.dmg

      # 上传macOS DMG到Release
      - name: Upload macOS DMG Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./HDD-System-macOS-x86_64.dmg
          name: Release ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.create-tag.outputs.tag_name }}
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.create-tag.outputs.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}